@precedence {
  block @cut,
  times @left,
  plus @left,
  rel @left,
  equal @left,
  and @left,
  or @left
}

@top Program { TopItem* }

@tokens {
  @precedence { 
    Boolean, 
    Resource, Module, LocalKW, LocalsKW, Provider, Data, Variable, 
    Identifier, 
    LineComment, 
    Slash, 
    FloatExp, FloatNoExp, Int 
  }

  space { @whitespace+ }

  LineComment { "//" ![\n]* | "#" ![\n]* }

  BlockComment { "/*" blockCommentRest }
  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  Boolean { "true" | "false" | "null" }

  Resource { "resource" }
  Module   { "module" }
  LocalKW  { "local" }
  LocalsKW { "locals" }
  Provider { "provider" }
  Data     { "data" }
  Variable { "variable" }

  FloatExp { @digit+ ("." @digit+)? }
  FloatNoExp { @digit+ "." @digit+ }
  Int { @digit+ }

  Slash { "/" }

  AnyChar { "_" }

  StringToken {
    '"'
    ( "\\" AnyChar | !["\\] )*
    '"'
  }

  EqualEqual { "==" }
  NotEqual   { "!=" }
  GreaterEq  { ">=" }
  LessEq     { "<=" }
  AndAnd     { "&&" }
  OrOr       { "\\|\\|" }
  Arrow      { "=>" }
  Greater    { ">" }
  Less       { "<" }
  Plus       { "\\+" }
  Minus      { "-" }
  Star       { "\\*" }
  Mod        { "%" }
  Bang       { "!" }

  eq { "=" }
  lbrace { "{" }
  rbrace { "}" }
  lbracket { "\\[" }
  rbracket { "\\]" }
  lparen { "\\(" }
  rparen { "\\)" }

  Identifier {
    $[a-zA-Z_] $[a-zA-Z0-9_.-]*
  }
}

@skip {
  space |
  BlockComment
}

TopItem {
  Block | AttributeStatement | LineComment
}

Block[@dynamicPrecedence=5] {
  BlockLabel { 
    (Resource | Module | Provider | Data | Variable) !block StringToken+
  } |
  (LocalsKW | LocalKW | Identifier) !block
  (StringToken !block)* lbrace BlockBody rbrace
}

BlockBody {
  (AttributeStatement | Block | LineComment)*
}

AttributeStatement {
  Identifier eq Expression
}

Expression {
  Literal |
  UnaryExpression |
  BinaryExpression |
  Parens |
  ObjectLit |
  ArrayLit |
  Identifier
}

Literal {
  Boolean |
  FloatExp |
  FloatNoExp |
  Int |
  String
}

String {
  StringToken |
  InterpString
}

InterpString {
  "${" Expression "}"
}

Parens {
  lparen Expression rparen
}

ObjectLit {
  lbrace (ObjectItem (Comma ObjectItem)*)? rbrace
}

ObjectItem {
  (Identifier | StringToken) (eq | Arrow) Expression
}

ArrayLit {
  lbracket (Expression (Comma Expression)*)? rbracket
}

Comma { "," }

UnaryExpression {
  Bang Expression |
  Minus Expression
}

BinaryExpression {
  Expression !times (Star | Slash | Mod) Expression |
  Expression !plus (Plus | Minus) Expression |
  Expression !rel (GreaterEq | LessEq | Greater | Less) Expression |
  Expression !equal (EqualEqual | NotEqual) Expression |
  Expression !and AndAnd Expression |
  Expression !or OrOr Expression
}